<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- >STYLES -->
  <link rel="icon" type="image/png" href="img/plus.png" />
  <link rel="stylesheet" href="css/base.css" />
  <link rel="stylesheet" href="css/main.css" />
  <style 
    type="text/css">
    div[id^="txt-current_"] {
      background-color: #fafa00;
      font-weight: bold;
      
    }
    #player-title-box {
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      text-align: center;
    }

    #txt_sync_content {
      padding: 0px 36px;
    }

    #spkr_keys_box {
      margin-top: 0px;
      margin-bottom: 18px;
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      min-height: 22px;
    }

    .spkr_key {
      font-family: Seravek, Arial, Helvetica, sans-serif;
      font-size: 18px;
      margin-right: 8px;
      display: inline;
    }

    .spkr_name {
      font-family: Seravek, Arial, Helvetica, sans-serif;
      font-size: 18px;
      margin-right: 8px;
      display: inline;
      font-style: italic;
    }

    #sync_player {
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      border: solid 1px #ffffff;
    }

    #gloss-box {
      width: 100%;
      min-height: 65px;
      margin-left: auto;
      margin-right: auto;
      margin-top: 12px;
    }

    div.glossTable {
      width: 100%;
      text-align: left;
      min-height: 30px;
      margin-bottom: 12px;
      padding-left: 12px;
      padding-right: 12px;
    }
    .divTable.glossTable .divTableRow {
      font-size: 18px;
      line-height: 26px;
    }
    .divTable.glossTable .divTableCell {
      font-family: Seravek, Arial, Helvetica, sans-serif;
    }
    .divTable.glossTable .spkr {
      width: 55px;
    }
    div.scrollTable {
      width: 100%;
      height: 470px;
      margin-left: auto;
      margin-right: auto;
      overflow-x: hidden;
      overflow-y: visible;
      background-color: #ffffff;
      border: solid 1px #cccccc;
    }
    div.scrollTableCont {
      margin: 0;
      padding: 0;
      border: 0;
      outline: 0;
      font-size: 100%;
      vertical-align: baseline;
      background: transparent;
    }
    .divTable.scrollTableCont .divTableRow {
      font-size: 18px;
      line-height: 26px;
      margin: 0;
    }
    .divTable.scrollTableCont .divTableCell {
      font-family: Seravek, Arial, Helvetica, sans-serif;
    }
    .divTable.scrollTableCont .spkr {
      width: 55px;
      margin-right: 4px;
      font-weight: normal;
      padding-left: 12px;
    }
    .divTable.scrollTableCont .spkr:hover {
      cursor: pointer;
      font-weight: bold;
    }
    .divTable.scrollTableCont .spkn {
      margin-left: 8px;
      padding-right: 12px;
    }

    .divTable {
      display: table;
    }
    .divTableRow {
      display: table-row;
    }
    .divTableCell {
      display: table-cell;
    }
  </style>

  <title>SYLARD</title>
</head>
<body>
  {{{body}}}

  <!-- SCRIPTS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script
    src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"
    integrity="sha512-uto9mlQzrs59VwILcLiRYeLKPPbS/bT71da/OEBYEwcdNUk8jYIy+D176RYoop1Da+f9mvkYrmj5MCLZWEtQuA=="
    crossorigin="anonymous"
  ></script>
  <script src="js/shared.js"></script>
  <script src="js/jscolor.js"></script>
  <script type="text/javascript">
    var media;
    var ts_start_time_array = [];
    var ts_stop_time_array = [];
    var sub_time;
    var initial_time = "";
    var initial_time_end = "";
    var current_start_time = "";
    var current_id_arr = [];
    var transArr = Array();
    var glossArr = Array();
    var speakerShowArr = Array();
    var tierShowArr = Array();
    /* DATA */
    var dataArr = JSON.parse(`{{{dataArrStr}}}`);
    
    var tierArr = JSON.parse(`{{{tierArrStr}}}`);
    
    var timeslotArr = JSON.parse(`{{{timeslotArrStr}}}`);
    
    var lineTimeArr = JSON.parse(`{{{lineTimeArrStr}}}`);

    $(document).ready(function () {
      setColors();
      setData();
      for (pid in tierArr) {
        if (tierArr.hasOwnProperty(pid)) {
          var showSpeaker = false;
          var tiers = tierArr[pid].tiers;
          for (tid in tiers) {
            if (tiers.hasOwnProperty(tid)) {
              if (tierShowArr.indexOf(tid) === -1) {
                if (dataArr[tid]) {
                  var display = dataArr[tid].display;
                  if (display !== "nodisplay") {
                    showSpeaker = true;
                    tierShowArr.push(tid);
                  }
                }
              }
            }
          }
          if (speakerShowArr.indexOf(pid) === -1 && showSpeaker) {
            var checkboxId = "check-tier-" + pid;
            if (document.getElementById(checkboxId)) {
              speakerShowArr.push(pid);
              document.getElementById(checkboxId).checked = true;
            }
          }
        }
      }
      setTranscriptionBox();
      initial_time = 7.746;
      initial_time_end = 7.746;
      media = document.getElementById("sync_player");
      media.setAttribute("ontimeupdate", "sync(this.currentTime)");
      media.setAttribute("onmousemove", "sync(this.currentTime)");
      media.setAttribute("onclick", "sync(this.currentTime)");
      setPlayer();
      //primePlayer();
      document.getElementById("sync_player").onmousemove();
    });

    function alertMLoadErr() {
      document.getElementById("innertext").innerHTML =
        "<h1>Failed to open media file</h1>";
    }

    function setColors() {
      for (pid in tierArr) {
        //pid == $speaker
        var tiers = tierArr[pid].tiers;
        for (tid in tiers) {
          //tid == $a_tier['TIER_ID']
          if (dataArr[tid] && dataArr[tid].color) {
            tierArr[pid].tiers[tid].color = dataArr[tid].color;
          }
        }
      }
    }

    function setData() {
      transArr = [];
      glossArr = [];
      for (pid in tierArr) {
        //pid == $speaker
        var tiers = tierArr[pid].tiers;
        for (tid in tiers) {
          //tid == $a_tier['TIER_ID']
          var spkr = tiers[tid].code;
          var color = tiers[tid].color;
          if (dataArr[tid]) {
            var display = dataArr[tid].display;
            var lines = dataArr[tid].lines;
            for (l in lines) {
              var lineref = lines[l].lineref;
              var start = lineTimeArr[lineref].start;
              if (display === "bottom") {
                if (!transArr[start]) transArr[start] = [];
                if (!transArr[start][tid]) transArr[start][tid] = [];
                transArr[start][tid]["speaker"] = pid;
                transArr[start][tid]["color"] = color;
                transArr[start][tid]["lineref"] = lineref;
                transArr[start][tid]["start"] = lines[l].start;
                transArr[start][tid]["stop"] = lines[l].stop;
                transArr[start][tid]["spkr"] = spkr;
                transArr[start][tid]["id"] = l;
                transArr[start][tid]["value"] = lines[l].value;
              } else {
                if (!glossArr[lineref]) glossArr[lineref] = [];
                if (!glossArr[lineref][tid]) glossArr[lineref][tid] = [];
                if (!glossArr[lineref][tid][l])
                  glossArr[lineref][tid][l] = [];
                glossArr[lineref][tid][l]["speaker"] = pid;
                glossArr[lineref][tid][l]["color"] = color;
                glossArr[lineref][tid][l]["spkr"] = spkr;
                glossArr[lineref][tid][l]["value"] = lines[l].value;
              }
            }
          }
        }
      }
    }

    function setTranscriptionBox() {
      var innerHtml = '<div class="divTable scrollTableCont">';
      for (t in transArr) {
        for (s in transArr[t]) {
          var speaker = transArr[t][s]["speaker"];
          if (
            tierShowArr.indexOf(s) !== -1 &&
            speakerShowArr.indexOf(speaker) !== -1
          ) {
            var color = transArr[t][s]["color"];
            var lineref = transArr[t][s]["lineref"];
            var start = transArr[t][s]["start"];
            var stop = transArr[t][s]["stop"];
            var spkr = transArr[t][s]["spkr"];
            var id = transArr[t][s]["id"];
            var value = transArr[t][s]["value"];
            innerHtml +=
              '<div name="bottom-' +
              lineref +
              '" class="divTableRow" style="color:#' +
              color +
              '" data-start="' +
              start +
              '" data-stop="' +
              stop +
              '"><div class="divTableCell spkr">' +
              spkr +
              '</div><div class="divTableCell spkn" id="' +
              id +
              '">' +
              value +
              "</div></div>";
          }
        }
      }
      innerHtml += "</div>";
      document.getElementById("txt_lns").innerHTML = innerHtml;
    }

    function setPlayer() {
      var i = 0;
      for (l in lineTimeArr) {
        ts_start_time_array[i] = timeslotArr[lineTimeArr[l]["start"]] / 1000;
        ts_stop_time_array[i] = timeslotArr[lineTimeArr[l]["stop"]] / 1000;
        if (document.getElementsByName("bottom-" + l)) {
          var element = document.getElementsByName("bottom-" + l)[0];
          if (element)
            element.childNodes[0].setAttribute(
              "onclick",
              "set_time_play_and_pause(" +
                ts_start_time_array[i] +
                ", " +
                ts_stop_time_array[i] +
                ")"
            );
        }
        i++;
      }
      if (initial_time > 0) {
        try {
          set_time_play_and_pause(initial_time, initial_time_end);
        } catch (error) {
          media.addEventListener(
            "canplay",
            function () {
              set_time_play_and_pause(initial_time, initial_time_end);
            },
            true
          );
        }
      }
    }

    function set_time_play_and_pause(start_time, end_time) {
      media.pause();
      clearTimeout(sub_time);
      play_time = Math.ceil((end_time - start_time) * 1000);
      if (play_time > 0) {
        media.currentTime = start_time;
        media.play();
        sub_time = setTimeout(function () {
          media.pause();
        }, play_time);
      }
    }

    function sync(current_time) {
      var txt_lns_rect = document
        .getElementById("txt_lns")
        .getBoundingClientRect();
      var mid_point = 460;
      var max_scroll = document.getElementById("txt_lns").scrollHeight - 470;
      var ref_id;
      var innerHtml = "";
      var i = 0;
      for (l in lineTimeArr) {
        if (
          current_time >= parseFloat(ts_start_time_array[i]) &&
          current_time <= parseFloat(ts_stop_time_array[i])
        ) {
          if (document.getElementsByName("bottom-" + l)) {
            var elements = document.getElementsByName("bottom-" + l);
            for (e in elements) {
              if (elements[e] instanceof Element) {
                elements[e].setAttribute("id", "txt-current_" + i);
                if (
                  elements[e].getBoundingClientRect().bottom >
                  txt_lns_rect.bottom
                ) {
                  var scroll =
                    elements[e].getBoundingClientRect().top -
                    txt_lns_rect.top -
                    10;
                  document.getElementById("txt_lns").scrollTop += scroll;
                }
              }
            }
          }
          if (current_start_time != ts_start_time_array[i]) {
            current_start_time = ts_start_time_array[i];
            current_id_arr = [];
            document.getElementById("txt_refs").innerHTML = "";
          }
          if (current_id_arr.indexOf(l) === -1) {
            if (glossArr[l]) {
              innerHtml = document.getElementById("txt_refs").innerHTML;
              for (s in glossArr[l]) {
                if (tierShowArr.indexOf(s) !== -1) {
                  for (n in glossArr[l][s]) {
                    var speaker = glossArr[l][s][n]["speaker"];
                    if (speakerShowArr.indexOf(speaker) !== -1) {
                      var spkr = glossArr[l][s][n]["spkr"];
                      var value = glossArr[l][s][n]["value"];
                      var color = glossArr[l][s][n]["color"];
                      innerHtml +=
                        "<div class='divTableRow' style='color:#" +
                        color +
                        "'><div class='divTableCell spkr'>" +
                        spkr +
                        "</div><div class='divTableCell tran'>" +
                        value +
                        "</div></div>";
                    }
                  }
                }
              }
              document.getElementById("txt_refs").innerHTML = innerHtml;
            }
            current_id_arr.push(l);
          }
        } else {
          try {
            if (document.getElementsByName("bottom-" + l)) {
              var elements = document.getElementsByName("bottom-" + l);
              for (e in elements) {
                if (elements[e] instanceof Element) {
                  elements[e].removeAttribute("id");
                }
              }
            }
          } catch (err) {}
        }
        i++;
      }
    }

    function changePresCheck(tierID) {
      var eleName = "check-tier-" + tierID;
      var idName = "check-tier-" + tierID;
      var cbarray = document.getElementsByName(eleName);
      var checked = document.getElementById(idName).checked;
      for (i in cbarray) {
        var tierName = cbarray[i].value;
        cbarray[i].checked = checked;
        if (tierName) toggleTier(tierName);
      }
    }

    function changeTierCheck(tierID) {
      var eleName = "check-tier-" + tierID;
      var idName = "check-tier-" + tierID;
      var cbarray = document.getElementsByName(eleName);
      var tchecked = false;
      for (i in cbarray) {
        if (cbarray[i].checked === true && cbarray[i].value) tchecked = true;
      }
      document.getElementById(idName).checked = tchecked;
    }

    function restartPlayer() {
      media.currentTime = 0;
      document.getElementById("txt_refs").innerHTML = "";
      var innerHtml = "";
      var i = 0;
      for (l in lineTimeArr) {
        if (
          0 >= parseFloat(ts_start_time_array[i]) &&
          0 <= parseFloat(ts_stop_time_array[i])
        ) {
          current_start_time = ts_start_time_array[i];
          current_id_arr = [];
          document.getElementById("txt_refs").innerHTML = "";
          if (current_id_arr.indexOf(l) === -1) {
            if (glossArr[l]) {
              innerHtml = document.getElementById("txt_refs").innerHTML;
              for (s in glossArr[l]) {
                if (tierShowArr.indexOf(s) !== -1) {
                  for (n in glossArr[l][s]) {
                    var speaker = glossArr[l][s][n]["speaker"];
                    if (speakerShowArr.indexOf(speaker) !== -1) {
                      var spkr = glossArr[l][s][n]["spkr"];
                      var value = glossArr[l][s][n]["value"];
                      var color = glossArr[l][s][n]["color"];
                      innerHtml +=
                        "<div class='divTableRow' style='color:#" +
                        color +
                        "'><div class='divTableCell spkr'>" +
                        spkr +
                        "</div><div class='divTableCell tran'>" +
                        value +
                        "</div></div>";
                    }
                  }
                }
              }
              document.getElementById("txt_refs").innerHTML = innerHtml;
            }
            current_id_arr.push(l);
          }
        }
        i++;
      }
    }

    function toggleTier(tierID) {
      var chkIdStr = "checkbox-" + tierID;
      if (document.getElementById(chkIdStr).checked === true) {
        tierShowArr.push(tierID);
      } else {
        var index = tierShowArr.indexOf(tierID);
        tierShowArr.splice(index, 1);
      }
      restartPlayer();
      setTranscriptionBox();
      setPlayer();
    }

    function changeTierColor(color, speaker, tierID) {
      var keyID = "key-" + tierID;
      var selColor = "#" + color;
      document.getElementById(keyID).style.color = selColor;
      tierArr[speaker].tiers[tierID].color = color;
      setData();
      restartPlayer();
      setTranscriptionBox();
      setPlayer();
    }

    function changeTierPlacement(tierID) {
      var idName = tierID + "-display";
      var value = document.getElementById(idName).value;
      dataArr[tierID].display = value;
      setData();
      restartPlayer();
      setTranscriptionBox();
      setPlayer();
    }

    function toggleSpeaker(spkr) {
      var chkIdStr = "check-tier-" + spkr;
      if (document.getElementById(chkIdStr).checked === true) {
        speakerShowArr.push(spkr);
      } else {
        var index = speakerShowArr.indexOf(spkr);
        speakerShowArr.splice(index, 1);
      }
      restartPlayer();
      setTranscriptionBox();
      setPlayer();
    }

    function toggleDisplayPanel() {
      var display = document.getElementById("spkr_keys").style.display;
      if (display === "none") {
        document.getElementById("spkr_keys").style.display = "block";
        document.getElementById("plusButton").style.display = "none";
        document.getElementById("minusButton").style.display = "block";
      }
      if (display === "block") {
        document.getElementById("spkr_keys").style.display = "none";
        document.getElementById("plusButton").style.display = "flex";
        document.getElementById("minusButton").style.display = "none";
      }
    }
  </script>

</body>
</html>